<?php

/**
 * @file
 * Functions to support theming in the postbellum theme.
 */

use Drupal\commerce_order\PriceCalculator;
use Drupal\commerce_order\PriceCalculatorResult;
use Drupal\commerce_payment\Plugin\Commerce\PaymentGateway\SupportsStoredPaymentMethodsInterface;
use Drupal\commerce_payment\Plugin\Commerce\PaymentGateway\HasPaymentInstructionsInterface;
use Drupal\commerce_trustpay\HasPaymentInstructionsFromOrderInterface;

/**
 * Implements hook_preprocess_HOOK() for html.html.twig.
 */
function postbellum_preprocess_html(array &$variables) {
  /* Add class to html tag */
  //$variables['html_attributes']->addClass('no-js');

  // Don't display the site name twice on the front page (and potentially others)
  /*if (isset($variables['head_title_array']['title']) && isset($variables['head_title_array']['name']) && ($variables['head_title_array']['title'] == $variables['head_title_array']['name'])) {
    $variables['head_title'] = $variables['head_title_array']['name'];
  }*/
}

/**
 * Implements hook_page_attachments_alter().
 */
function postbellum_page_attachments_alter(array &$page) {
  // Tell IE to use latest rendering engine (not to use compatibility mode).
  /*$ie_edge = [
    '#type' => 'html_tag',
    '#tag' => 'meta',
    '#attributes' => [
    'http-equiv' => 'X-UA-Compatible',
    'content' => 'IE=edge',
    ],
  ];
  $page['#attached']['html_head'][] = [$ie_edge, 'ie_edge'];*/
}

/**
 * Implements hook_preprocess_page() for page.html.twig.
 */
function postbellum_preprocess_page(array &$variables) {
}

function postbellum_preprocess_page_title(array &$variables) {
  if (\Drupal::request()->attributes->has('commerce_product')) {
    $variables['title'] = NULL;
  }
}

function postbellum_preprocess_commerce_order_receipt(&$variables) {
  \Drupal::logger('postbellum')->debug('In postbellum_preprocess_commerce_order_receipt()');
  /** @var Drupal\commerce_order\Entity\OrderInterface $order */
  $order = $variables['order_entity'];
  /** @var \Drupal\commerce_payment\Entity\PaymentGatewayInterface $payment_gateway */
  $payment_gateway = $order->get('payment_gateway')->entity;
  /** @var \Drupal\commerce_payment\Plugin\Commerce\PaymentGateway\HasPaymentInstructionsInterface $payment_gateway_plugin */
  $payment_gateway_plugin = $payment_gateway->getPlugin();

  // Add payment gateway and payment instruction data if available for the order.
  if ($order->get('payment_gateway')->isEmpty()) {
    \Drupal::logger('postbellum')->debug('$order->get(\'payment_gateway\')->isEmpty()');
    return;
  }

  // Set payment gateway label on template variable:
  // $variables['payment_instructions'] = null;
  $variables['payment_gateway'] = $payment_gateway->get("label");
  if ($payment_gateway_plugin instanceof HasPaymentInstructionsFromOrderInterface) {
    \Drupal::logger('postbellum')
      ->debug('$payment_gateway_plugin instanceof HasPaymentInstructionsFromOrderInterface');

    // Get all payments for this order
    $payment_storage = \Drupal::entityTypeManager()
      ->getStorage('commerce_payment');
    $payments = $payment_storage->loadMultipleByOrder($order);

    // Get array of information for all payments
    foreach ($payments as $paymentId => $payment) {
      $variables['payments'][] = [
        'amount' => $payment->getAmount(),
        'timestamp' => $payment->getCompletedTime(),
        'label' => $payment->getPaymentGateway()->label(),
      ];
    }
dpm($variables['payments']);
    // Get payment instruction using the order
    $variables['payment_instructions'] = $payment_gateway_plugin->buildPaymentInstructions($order);

    if (!$order->isPaid()) {
      if (!empty($payments)) {
        $payments = array_filter($payments, function ($payment) use ($payment_gateway) {
          return $payment->getPaymentGatewayId() == $payment_gateway->id();
        });
      }
      else {
        /** @var \Drupal\Core\Messenger\MessengerInterface $messenger */
        $messenger = \Drupal::service('messenger');
        $messenger->addError(t('There are no payments in this order.'));
      }
      // Set payment payment instruction data on template variable:

    }

  }
}

function postbellum_preprocess_commerce_product(array &$variables) {
  $view_mode = $variables['elements']['#view_mode'];
  if ($view_mode === 'views') {
    $product = $variables['elements']['#commerce_product'];
    $entity_manager = \Drupal::entityTypeManager();
    $price_number = [];
    foreach ($product->getVariationIds() as $variation) {
      $product_variation = $entity_manager->getStorage('commerce_product_variation')->load($variation);
      $price_number[] = $product_variation->get('price')->getValue()[0]['number'];
      $price_currency = $product_variation->get('price')->getValue()[0]['currency_code'];
    }
    $variables['product_price'] = min($price_number);
    $variables['prices_count'] = count(array_unique($price_number));
  }
  $variables['gallery'] = [];
  $style = \Drupal\image\Entity\ImageStyle::load('gallery');
  $product = $variables['elements']['#commerce_product'];
  $images = $product->get('field_images');

  foreach ($images as $image) {
    $variables['gallery'][] = [
      'url' => $style->buildUrl($image->entity->uri->value),
      'alt' => $image->alt,
      'title' => $image->title,
    ];
  }
}

/**
 * Implements hook_theme_suggestions_page_alter().
 */
function postbellum_theme_suggestions_page_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_theme_suggestions_node_alter().
 */
function postbellum_theme_suggestions_node_alter(array &$suggestions, array $variables) {
  /*$node = $variables['elements']['#node'];

  if ($variables['elements']['#view_mode'] == "full") {

  }*/
}

function postbellum_theme_suggestions_commerce_product_alter(array &$suggestions, array $variables) {
  /*
  $mode = $variables['elements']['#view_mode'];
  $product = $variables['elements']['#commerce_product'];
  $layout = $product->get('field_layout')->getValue()[0]['value'];
  if ($mode === 'views') {
    $suggestions[] = 'commerce_product__' . $layout;
  }
  */
}

/**
 * Implements hook_preprocess_HOOK() for Block document templates.
 */
function postbellum_preprocess_block(array &$variables) {

}

/**
 * Implements hook_theme_suggestions_field_alter().
 */
function postbellum_theme_suggestions_field_alter(array &$suggestions, array $variables) {
  /*$element = $variables['element'];
  $suggestions[] = 'field__' . $element['#view_mode'];
  $suggestions[] = 'field__' . $element['#view_mode'] . '__' . $element['#field_name'];*/
}

/**
 * Implements hook_theme_suggestions_field_alter().
 */
function postbellum_theme_suggestions_fieldset_alter(array &$suggestions, array $variables) {
  // dpm($variables);
  if ($variables['element']['#type'] === 'commerce_product_rendered_attribute') {
    $suggestions[] = 'fieldset__rendered_attribute';
  }
  /*$element = $variables['element'];
  if (isset($element['#attributes']['class']) && in_array('form-composite', $element['#attributes']['class'])) {
    $suggestions[] = 'fieldset__form_composite';
  }*/
}

/**
 * Implements hook_preprocess_node().
 */
function postbellum_preprocess_node(array &$variables) {
  // Default to turning off byline/submitted.
  //$variables['display_submitted'] = FALSE;
}

/**
 * Implements hook_theme_suggestions_views_view_alter().
 */
function postbellum_theme_suggestions_views_view_alter(array &$suggestions, array $variables) {
}

/**
 * Implements hook_preprocess_form().
 */
function postbellum_preprocess_form(array &$variables) {
  //$variables['attributes']['novalidate'] = 'novalidate';
}

/**
 * Implements hook_preprocess_select().
 */
function postbellum_preprocess_select(array &$variables) {
  //$variables['attributes']['class'][] = 'select-chosen';
}

/**
 * Implements hook_preprocess_field().
 */
function postbellum_preprocess_field(array &$variables, $hook) {
  /*switch ($variables['element']['#field_name']) {
  }*/
}

/**
 * Implements hook_preprocess_details().
 */
function postbellum_preprocess_details(array &$variables) {
  /*$variables['attributes']['class'][] = 'details';
  $variables['summary_attributes']['class'] = 'summary';*/
}

/**
 * Implements hook_theme_suggestions_details_alter().
 */
function postbellum_theme_suggestions_details_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_preprocess_menu_local_task().
 */
function postbellum_preprocess_menu_local_task(array &$variables) {
  //$variables['element']['#link']['url']->setOption('attributes', ['class'=>'rounded']);
}
